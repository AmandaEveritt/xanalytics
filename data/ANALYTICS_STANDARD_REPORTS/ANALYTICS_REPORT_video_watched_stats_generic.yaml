- "author": |-
    None
  "date": |-
    2015-05-22 19:30:58.027866
  "depends_on": |-
    ["{dataset}.video_stats"]
  "description": |-
    Video Viewed and Video Watched Statistics. Viewed is defined as initiating a video event (play, stop, pause, etc..). Watched is defined as having reached at least 95% of the total video duration. The percentage in the tooltip popup represents the video watched completion rate.
  "group_tags":
  - !!python/unicode ""
  "html": |-
    <div id="contain-{{report_name}}" style="min-width: 310px; margin: 0 auto">
                                   <img src="/images/loading_icon.gif"/>
    </div>
  "icon": |-
    None
  "javascript": |
    /* jshint ignore:start */
    parameters = {{parameters}};
    /* jshint ignore:end */
    parameters.get_table_columns = true;

    $.getJSON(
        '/custom/get_report_data/{{report_name}}',
        parameters,

        function(data) {

            html = '<table id="table-{{report_name}}" class="display" width="100%"></table>';
            html += '<div id="plot-{{report_name}}"></div>';
            if (data.error){
                html = "Error!  " + data.error;
            }
            $('#contain-{{report_name}}').html(html);
            if (data.error){ return; }

            // make data table
            if (0) {
            var table = $('#table-{{report_name}}').DataTable({
                dom: 'T<"clear">lfrtip',
                "columns": data['tablecolumns'],
                "pageLength": 10,
                searching: true,
                ordering: true,
                data: data['data'],
            });
            }

            // create data series
            var videos_watched = [];
        var videos_viewed = [];
        var videos = [];
        var chaptername = [];
            data['data'].forEach(function(x){
            videos.push(x.name);
            //videos_watched.push(Number(x.videos_watched));
            srow1 = {completerate: String(x.video_completion_pct + '%'),
                     y: Number(x.videos_watched)}
            videos_watched.push(srow1);
            srow2 = {chaptername: String(x.chapter_name),
                     videoname: String(x.name),
                     y: Number(x.videos_viewed)};
            videos_viewed.push(srow2);
            //videos_viewed.push(Number(x.videos_viewed));
            });

          series = [{name: 'videos', data: videos, pointPadding: 0.6,pointWidth: 20},
                    {name: 'chaptername', data: chaptername}, ];
          series_count = [{name: 'videos viewed',
                           data: videos_viewed,
                           color: 'rgba(165,170,217,1)',
                          pointPadding: 0.1},
                          {name: 'videos watched',
                           data: videos_watched,
                           color: 'rgba(126,86,134,.9)',
                          pointPadding: 0.1},
                         ];

            // plot data
            $('#plot-{{report_name}}').highcharts({

                chart: { type: 'bar',zoomType: 'xy', height: 1150 },
                credits: {  enabled: false  },
                title : {
                            text : 'Video Viewed/Watched Stats for ' + parameters.course_id,
                },
            xAxis: {        categories: videos, pointWidth:20 },
             tooltip: {

                   formatter: function () {
                    //var s = 'Video:<b>' + this.points.videoname + '</b>';
                    var s = '';
                     //s += this.point.chaptername;
                    $.each(this.points, function () {
                        if (this.point.chaptername) {
                          s += 'Chapter: ' + this.point.chaptername + '<br/>';
                        }
                        if (this.point.videoname) {
                          s += 'Video: ' + this.point.videoname + '<br/>';
                        }
                        s += '<span style="color:' + this.series.color + '">\u25CF</span> ' + this.series.name + ': <b>' + this.y + '</b><br/>';
                        if (this.point.completerate) {
                          s+= 'Completion Rate: ' + this.point.completerate + '<br/>';
                        }

                    });
                     return s;
                   },
                   shared: true,
            },
            plotOptions: {
                bar: {
                    grouping: false,
                    shadow: false,
                    borderWidth: 0,
                    groupPadding: 0.05,
                    pointPadding: 0.1,
                }
            },
          series: series_count
            });

        } );
  "meta_info": {}
  "name": |-
    video_watched_stats_generic
  "sql": |-
    SELECT index_chapter,
            index_video,
            name,
            video_id,
            chapter_name,
            videos_viewed,
            videos_watched,
            ROUND(ROUND((videos_watched / videos_viewed)*100,2),2) as video_completion_pct
    FROM [{dataset}.video_stats]
    WHERE chapter_name is not null and index_chapter is not null and name is not null;
  "table_name": |-
    stats_videos_watched
  "title": |-
    Videos
