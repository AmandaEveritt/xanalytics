- "author": |-
    None
  "date": |-
    2015-07-01 15:01:33.606060
  "depends_on": |-
    None
  "description": |-
    ID Verified Revenue for set of tagged courses (only available for some courses)
  "group_tags":
  - !!python/unicode |-
    group
  "html": |-
    <div id="contain-{{report_name}}" style="min-width: 310px; margin: 0 auto">
                                   <img src="/images/loading_icon.gif"/>
    </div>
  "icon": |-
    None
  "javascript": |+
    parameters = {% autoescape off %}{{parameters}};{% endautoescape %}  // jshint ignore:line
    parameters.get_table_columns = true;

    var make_report = function() {

      var ntables = 0;
      var nplots = 0;
      var data = {};

      var report_name = "{{report_name}}";
      var report_div = $('#contain-{{report_name}}');

      var add_text = function(text){  report_div.append("<p>"+text+"</p>");  }
      var new_section = function(title){ report_div.append("<br/><hr width='40%'/><h4>"+title+"</h4>"); }

      // jshint ignore:start
      {% autoescape off %} {{cr_js_library["tables"]}} {% endautoescape %}
      {% autoescape off %} {{cr_js_library["plotting"]}} {% endautoescape %}
      // jshint ignore:end

      var make_horizontal_bar_plot = function(plot_title, xcategories, series, optarg){
        // horizontal bar chart
        // example:
        //     make_horizontal_bar_plot('test hist', ['a','b','c'], [{name:'test', data:[1,2,3]}]);

        optarg = optarg || {};
        var div_id = add_new_plot(optarg);

        $('#'+div_id).highcharts({
          chart: {     type: 'bar', zoomType: 'x' },
          credits: {  enabled: false  },
          title : {   text : plot_title },
          xAxis: {        categories: xcategories  },
          yAxis: { title: { text: optarg.ytitle},  min: optarg.ymin },
          series : series,
          legend: {reversed: true},
          plotOptions: { series: { stacking: optarg.stacking } },
        });
      }

      // main function called to process data from AJAX call
      var process_data = function(ajax_data){
        html = '';
        console.log("Processing data ", ajax_data);
        if (ajax_data.error){
          html = "Error!  " + ajax_data.error;
          console.log('error = ', ajax_data.error);
        }
        report_div.html(html);
        data['data'] = ajax_data['data'];
        if (ajax_data.error){ return; }

        var row = ajax_data['data'][0];
        var dd = ajax_data['data'];

            new_section("Revenue summary:");

        var courses = [];
        var grev = [];
        var refunds = [];
        var net_rev = [];
        var norders = 0;
        var nrefunds = 0;
        var rseries = [
          {name: "Refunds ($)", data: refunds},
          {name: 'Net revenue ($)', data: net_rev},
        ];
        // var refseries = [{name: 'Refunds ($)', data: refunds}];
            dd.forEach(function(x){
          if (courses.indexOf(x['course_id'])>=0){  // remove duplicates!
                    return;
          }
          courses.push(x['course_id']);
          grev.push(Number(x["*Gross Rev  $'s (USD)"]));
          refunds.push(Number(x["Refunds  $"]));
          net_rev.push(Number(x["*Gross Rev  $'s (USD)"]) - Number(x["Refunds  $"]));
          norders += Number(x['*Gross Rev  # Orders']);
          nrefunds += Number(x['Refunds  #']);
        });


        make_horizontal_bar_plot('Revenue for {{parameter_values.group_tag}} courses',
                                 courses,
                                 rseries,
                                 {height: 120+40*grev.length,
                                  stacking: "normal",
                                 });

        var show_field = function(title, field, val, large){
          if (!val){
            var valstr = (row[field] || '(n/a)');
            val = numberWithCommas(Number(valstr));
            if (val=="NaN"){ val = valstr }
          }
          var html = "<font color='brown'>" + title + "</font>: <font color='green'>" + val + "</font><br/>";
          if (large){
            html = "<span style='font-size:200%'>" + html + "</span>";
          }
          add_text(html);
        }
        show_field("Total Gross Revenue ($)", "", numberWithCommas(math.sum(grev)));
        show_field("Total Number of orders", "", norders);
        show_field("Average order price ($)", "", (math.sum(grev)/norders).toFixed(2));
        show_field("Total Refunds ($)", "", numberWithCommas(math.sum(refunds)));
        show_field("Number of refunds", "", nrefunds);
        show_field('Total net revenue = gross - refunds ($)', '', numberWithCommas(math.sum(grev) - math.sum(refunds)), true);

        // show big table of all the data
        // new_section("All revenue data:");
        // make_table(ajax_data['tablecolumns'], ajax_data['data']);
      }

      var get = function(x){ return eval(x); }  // jshint ignore:line

      return {process_data: process_data,
              self: this,
              data: data,
              get: get,
             }

    }

    analytics_report = make_report();  // instantiate
    parameters.filename = "ID_Verified_current.csv";
    console.log('parameters=', parameters);

    if (1){
      $.getJSON(
        '/file/get/report',
        parameters,
        analytics_report.process_data
      );
    }

  "meta_info": {}
  "name": |-
    multicourse-report-revenue
  "sql": ""
  "table_name": |-
    None
  "title": |-
    MultiCourse Report - Revenue
