- "author": |-
    None
  "date": |-
    2015-10-24 03:20:46.612540
  "depends_on": |-
    ["{dataset}.item_response_theory_report"]
  "description": "Report on all (\"capa\") problems in the course, giving classical\
    \ test theory statistics \r\n(e.g. item-test correlation, and Cronbach's alpha),\
    \ and item response theory 2PL parameters \r\n(item difficulty and discrimination)."
  "group_tags":
  - !!python/unicode |-
    course
  "html": |-
    <p>IRT parameters are only available for a subset of problems.
      Sort the table by difficulty or by discrimination, for example</p>
    <div id="contain-{{report_name}}" style="min-width: 310px; margin: 0 auto">
                                   <img src="/images/loading_icon.gif"/>
    </div>
  "icon": |-
    None
  "javascript": |
    function loadJS(src, callback) {
      var s = document.createElement('script');
      s.src = src;
      s.async = true;
      s.onreadystatechange = s.onload = function() {
        var state = s.readyState;
        if (!callback.done && (!state || /loaded|complete/.test(state))) {
          callback.done = true;
          callback();
        }
      };
      document.getElementsByTagName('head')[0].appendChild(s);
    }

    parameters = {% autoescape off %}{{parameters}};{% endautoescape %}  // jshint ignore:line
    parameters.get_table_columns = true;

    var make_report = function(course_id) {

      var ntables = 0;
      var nplots = 0;
      var data = {};

      var report_name = "{{report_name}}";
      var report_div = $('#contain-{{report_name}}');

      var add_text = function(text){  report_div.append("<p>"+text+"</p>");  }
      var new_section = function(title){ report_div.append("<br/><hr width='40%'/><h4>"+title+"</h4>"); }

      // jshint ignore:start
      {% autoescape off %} {{cr_js_library["tables"]}} {% endautoescape %}
      {% autoescape off %} {{cr_js_library["plotting"]}} {% endautoescape %}
      // jshint ignore:end

      var add_2pl_plot = function(){
        var imurl = "/file/get/course/{{course_id}}?filename=mooc-irt-plot5-2pl-icc.png";
        html3 = "<img width='900' id='plot_2pl_image' src='" + imurl + "' />";
        $('#irt-2pl-plot').html(html3);
      }

      var colorset = [
        "#CE0000",
        "#00CE00",
        "#0000CE",
        "#FF7F50",
        "#8B008B",
        "#F0E68C",
        "#8A2BE2",
        "#2F4F4F",
        "#000BFF",
        "#AF9F9F",
      ];

      var make_url_for_problem = function(pdata){
        var purl_name = pdata['problem_id'] || pdata['CP_problem_id'];   // CP_problem_id is disparaged
        var plabel = pdata['problem_label'];
        var url = "/problem/" + course_id + '/' + purl_name;
        return url;
      }

      var make_scatter_plot_options = function(){
        var spo = {allowPointSelect: true,
                   point: {
                     events: {
                       select: function(e){
                         var url = e.currentTarget.url;
                         window.open(url, "_blank");
                       }
                     }
                   }
                  };
        return spo;
      }

      var add_irt_ab_plot = function(irt_data){
        var sdata = [];
        var irt_series = [ {name: "IRT Parameters", data: sdata }];
        var atypes = {};
        var ccnt = 0;
            irt_data.forEach(function(v){
          var atype = v['assignment_type'];
          if (!atypes[atype]){
            atypes[atype] = colorset[ccnt];
            ccnt += 1;
          }
          sdata.push({x: v['Difficulty'], y: v['Discrimination'],
                      name: ( atype + ": " + v['problem_label'] +
                             " (" + v['problem_short_id'] + ")" ),
                      fillColor: atypes[atype],
                      url: make_url_for_problem(v),
                     });
        });
        var spo = make_scatter_plot_options();
        console.log("Generating plot with series=", irt_series);
        make_scatter_plot("[" + course_id + "] Discrimination vs. difficulty", irt_series,
                          {height:800,
                           xtitle: "Difficulty (b)",
                           ytitle: "Discrimination (a)",
                           seriesPlotOptions: spo,
                          });
      }

      var add_irt_vs_avg_plot = function(irt_data){
        var sdata = [];
        var irt_series = [ {name: "Average pct score vs difficulty", data: sdata }];
        var atypes = {};
        var ccnt = 0;
            irt_data.forEach(function(v){
          var atype = v['assignment_type'];
          if (!atypes[atype]){
            atypes[atype] = colorset[ccnt];
            ccnt += 1;
          }
          sdata.push({x: v['Difficulty'],
                      y: v['avg_problem_pct_score'],
                      name: ( atype + ": " + v['problem_label'] +
                             " (" + v['problem_short_id'] + ")" ),
                      fillColor: atypes[atype],
                      url: make_url_for_problem(v),
                     });
        });
        var spo = make_scatter_plot_options();
        console.log("Generating plot with series=", irt_series);
        make_scatter_plot("[" + course_id + "] Average problem score vs. difficulty", irt_series,
                          {height:800,
                           xtitle: "Difficulty (b)",
                           ytitle: "Average percent raw score",
                           seriesPlotOptions: spo,
                          });
      }
      // main function called to process data from AJAX call
      var process_data = function(ajax_data){
        html = '';
        // console.log("Processing data ", ajax_data);
        if (ajax_data.error){
          html = "Error!  " + ajax_data.error;
          console.log('error = ', ajax_data.error);
        }
        report_div.html(html);
        if (0){
        // parse CSV
          the_data = Papa.parse(ajax_data, {header:true,
                                            skipEmptyLines: true,
                                            dynamicTyping: true});
        }else{ // bigquery data result
          the_data = ajax_data;
        }

            // add links to problems to problem-specific page in the dashboard
        the_data.data.forEach(function(x){
          var plabel = x['problem_label'];
          x['problem_label'] = "<a href='" + make_url_for_problem(x) + "'>" + plabel + "</a>";
        });

        // make table columns
        if (0){
          tcols = [];
          the_data.meta.fields.forEach(function(x){
            tcols.push(colent(x, x));
          });
        }else{
          tcols = the_data['tablecolumns'];
        }

        // fix datatypes for numbers
        nfields = ["Discrimination", "Difficulty", "problem_nid","n_unique_users_attempted",
                   "item_test", "item_rest", "alpha",
                   "avg_problem_raw_score", "avg_problem_pct_score",
                   "Discrimination_SE", "Difficulty_SE"
                  ];
        the_data.data.forEach(function(x){
          nfields.forEach(function(fname){
            x[fname] = Number(x[fname]);
          });
        });


        // IRT method
        var irt_method = the_data.data[0].irt_method;

        tab_fields = ["problem_nid", "problem_short_id", "problem_label",
                      "chapter",
                      "assignment_type",
                      "problem_id", "IRT item number",
                      "avg_problem_raw_score", "avg_problem_pct_score",
                      "n_unique_users_attempted", "item_test", "item_rest", "alpha",
                      "Discrimination", "Difficulty",
                      "Discrimination_SE", "Difficulty_SE"];

        // table with just IRT scores
        tcols_irt = [
          colent("Problem #", "problem_nid"),
          colent('Assignment', "problem_short_id"),
          colent("Chapter / Section / Name", "problem_label"),
          colent("Discrimination", "Discrimination", {fixed: 3}),
          colent("Difficulty", "Difficulty", {fixed: 3}),
          colent("Disc. Std. Err", "Discrimination_SE", {fixed: 3}),
          colent("Diff. Std. Err", "Difficulty_SE", {fixed: 3}),
        ];
        new_section("IRT Data (for just problems where the data is available)");
        var html2 = "";
        if (irt_method.includes("R")){
          html2 += "These results are obtained using R using its ";
          html2 += "<a href='https://cran.r-project.org/web/packages/mirt/mirt.pdf'>mirt graded response model</a>. ";
        }else{
          html2 += "These results are obtained using Stata using its ";
          html2 += "<a href='http://www.stata.com/manuals14/irtirt2pl.pdf'>IRT graded response model</a>. ";
        }
        html2 += "Some problems are dropped from this analysis, e.g. if responses do not vary sufficiently. ";
        // html2 += "Also, some multi-part problems may have been combined, to make the analysis robust. ";
        html2 += "A graded response model is employed, in which cutpoints are established for each problem's scores,";
        html2 += "and the discrimination and difficulty are computed for each cutpoint.";
        html2 += "Please note that standard errors are also provided for discrimination and difficulty; these reflect";
        html2 += "the certainty (and uncertainty) inherent in those parameters; having a larger number of participants";
        html2 += "responding to a question typically gives lower errors.";
        if (the_data.last_modified_date){
          html2 += "<br/>These data were last modified " + the_data.last_modified_date + " UTC";
        }
        add_text(html2);
        var just_irt_data = [];
        the_data.data.forEach(function(x){
          if ((x.Discrimination!=="")){ just_irt_data.push(x); }
        });
        make_table(tcols_irt, just_irt_data);
        add_text("<div id='irt-2pl-plot'></div>");
        add_text("<div id='irt-ab-plot'></div>");
        // add_2pl_plot();
        add_irt_ab_plot(just_irt_data);


            alpha_check = the_data.data[0].alpha
        if (alpha_check){
          // classical test theory data
          tcols_ctt = [
            colent("Problem #", "problem_nid"),
            colent("Chapter / Section / Name", "problem_label"),
            colent("item-test correlation", "item_test", {fixed: 3}),
            colent("item-rest correlation", "item_rest", {fixed: 3}),
            colent("Cronbach's alpha", "alpha", {fixed: 3}),
          ];
          new_section("Classical Test Theory Data");
          html2 = "These results are obtained using Stata using its 'alpha' analysis,";
          html2 += "which provides item-test and item-rest correlation values, as well as ";
          html2 += "<a href='https://en.wikipedia.org/wiki/Cronbach%27s_alpha'>Cronbach's alpha</a>,";
          html2 += "a measure of the item reliability.";
          html2 += "<br>Typically a good alpha is above 0.8.";
          html2 += "<br>The item-test correlation gives a measure of how well performance on a single question";
          html2 += "correlates with the total score, for each individual, averaged across individuals."
          add_text(html2);
          make_table(tcols_ctt, the_data.data);
          add_irt_vs_avg_plot(just_irt_data);
        }else{
          new_section("Classical Test Theory Data");
          html2 = "No classical test theory data available for this course.";
          add_text(html2);
        }

        // show big table of all the data
        tcols_all = [
          colent("Problem #", "problem_nid"),
          colent("Chapter", "chapter"),
          colent("Assignment Type", "assignment_type"),
          colent("Chapter / Section / Name", "problem_label"),
          colent("Average raw score", "avg_problem_raw_score", {fixed: 3}),
          colent("Average percent score (out of 100)", "avg_problem_pct_score", {fixed:1}),
          colent("Observations (# unique users attempted)", "n_unique_users_attempted"),

          colent("item-test correlation", "item_test", {fixed: 3}),
          colent("item-rest correlation", "item_rest", {fixed: 3}),
          colent("Cronbach's alpha", "alpha", {fixed: 3}),

          colent("Discrimination", "Discrimination", {fixed: 3}),
          colent("Difficulty", "Difficulty", {fixed: 3}),
        ];
        new_section("All Problem Data");
        make_table(tcols_all, the_data.data);
      }

      var get = function(x){ return eval(x); }  // jshint ignore:line

      return {process_data: process_data,
              self: this,
              data: data,
              get: get,
             }

    }

    loadJS('/js/papaparse.min.js', function() {
      analytics_report = make_report("{{course_id}}");  // instantiate

      // parameters.filename = "item_response_theory_report.csv";

      if (1){
        $.get(
          // '/file/get/course/{{course_id}}',
          // {filename: parameters.filename},
         '/custom/get_report_data/{{report_name}}',
          parameters,
          analytics_report.process_data
        );
      }
     });
  "meta_info":
    !!python/unicode "require_table": !!python/unicode |-
      item_response_theory_report
  "name": |-
    item-response-theory-report
  "sql": |
    SELECT * from [{dataset}.item_response_theory_report] order by problem_nid
  "table_name": |-
    item_response_theory_report
  "title": |-
    Item Response Theory Report
