- "author": |-
    None
  "date": |-
    2015-07-01 16:37:51.564327
  "depends_on": |-
    None
  "description": |-
    Revenues from all courses (for which data is available)
  "group_tags":
  - !!python/unicode |-
    role:pm
  "html": |-
    <div id="contain-{{report_name}}" style="min-width: 310px; margin: 0 auto">
                                   <img src="/images/loading_icon.gif"/>
    </div>
  "icon": |-
    None
  "javascript": |+
    parameters = {% autoescape off %}{{parameters}};{% endautoescape %}  // jshint ignore:line
    parameters.get_table_columns = true;

    var make_report = function() {

      var ntables = 0;
      var nplots = 0;
      var data = {};

      var report_name = "{{report_name}}";
      var report_div = $('#contain-{{report_name}}');

      var add_text = function(text){  report_div.append("<p>"+text+"</p>");  }
      var new_section = function(title){ report_div.append("<br/><hr width='40%'/><h4>"+title+"</h4>"); }

      // jshint ignore:start
      {% autoescape off %} {{cr_js_library["tables"]}} {% endautoescape %}
      {% autoescape off %} {{cr_js_library["plotting"]}} {% endautoescape %}
      // jshint ignore:end

      // main function called to process data from AJAX call
      var process_data = function(ajax_data){
        html = '';
        console.log("Processing data ", ajax_data);
        if (ajax_data.error){
          html = "Error!  " + ajax_data.error;
          console.log('error = ', ajax_data.error);
        }
        report_div.html(html);
        data['data'] = ajax_data['data'];
        if (ajax_data.error){ return; }

        var row = ajax_data['data'][0];
        var dd = ajax_data['data'];

        new_section("Revenue summary:");

        var courses = [];
        var grev = [];
        var refunds = [];
        var net_rev = [];
        var norders = 0;
        var nrefunds = 0;
        var min_end_date = new Date();
        var max_end_date = new Date(1970);
        var rdat_by_course = {};   // key = course_id, value = dict of data
        var rseries = [
          {name: "Refunds ($)", data: refunds},
          {name: 'Net revenue ($)', data: net_rev},
        ];
        // var refseries = [{name: 'Refunds ($)', data: refunds}];
        var cdata = [];
            dd.forEach(function(x){
          if (courses.indexOf(x['course_id'])>=0){  // remove duplicates!
                    return;
          }
          if (Number(x['*Gross Rev  # Orders'])===0){
                    return;
          }
          var cid = x['course_id'];
          var x_grev = (Number(x["*Gross Rev  $'s (USD)"]));
          var x_refunds = (Number(x["Refunds  $"]));
          var x_net_rev = (Number(x["*Gross Rev  $'s (USD)"]) - Number(x["Refunds  $"]));
          norders += Number(x['*Gross Rev  # Orders']);
          nrefunds += Number(x['Refunds  #']);
          var rdat = {'course_id': cid, grev: x_grev, refunds: x_refunds, net_rev: x_net_rev };
          try{
            rdat['end_date'] = $.datepicker.parseDate('yy-mm-dd', x['Dates Course End'] || "" );
            if (rdat.end_date && (rdat.end_date < min_end_date)){ min_end_date = rdat.end_date; }
            if (rdat.end_date && (rdat.end_date > max_end_date)){ max_end_date = rdat.end_date; }
          }
          catch(err){
            console.log("cannot parse date= ", x['Dates Course End'], " for ", cid);
          }
          cdata.push(rdat);
          rdat_by_course[cid] = rdat;
        });

        console.log('min_end_date = ', min_end_date);
        console.log('max_end_date = ', max_end_date);

        cdata.sort(function(a,b){ return b.net_rev - a.net_rev; });
            cdata.forEach(function(x){
          courses.push(x['course_id']);
          grev.push(x['grev']);
          refunds.push(x['refunds']);
          net_rev.push(x['net_rev']);
        });

        var bp_div;

        var show_field = function(title, field, val, large){
          if (!val){
            var valstr = (row[field] || '(n/a)');
            val = numberWithCommas(Number(valstr));
            if (val=="NaN"){ val = valstr }
          }
          var html = "<font color='brown'>" + title + "</font>: <font color='green'>" + val + "</font><br/>";
          if (large){
            html = "<span style='font-size:200%'>" + html + "</span>";
          }
          add_text(html);
        }
        show_field("Total Gross Revenue ($)", "", numberWithCommas(math.sum(grev)));
        show_field("Total Number of orders", "", norders);
        show_field("Average order price ($)", "", (math.sum(grev)/norders).toFixed(2));
        show_field("Total Refunds ($)", "", numberWithCommas(math.sum(refunds)));
        show_field("Number of refunds", "", nrefunds);
        show_field('Total net revenue = gross - refunds ($)', '', numberWithCommas(math.sum(grev) - math.sum(refunds)), true);


        // aggregate revenue by date period, accepting input for fiscal year date

        var setup_revenue_by_fy = function(bsdat){
          // bsdat = broad stats data, which includes "Course Wrap" dates
          // we use those dates as a backup, when the end date is missing in the idv data

          add_text("<span id='revenue-by-fy'></span>");
          var div_rbf = $('#revenue-by-fy');
          var html = "Fiscal year starting month: <select id='rbyfy_month'>";
          for(var k=1; k<=12; k++){
            html += "<option value='" + k + "' " + ((k==7) ? "selected" : "") + ">" + k + "</option>";
          }
          html += "</select>";
          html += "<button id='rbfy_button'>Compute revenue by fiscal year</button>";
          div_rbf.html(html);

          var do_revenue_by_fy = function(){

            // fill in missing end dates, if any
            var wrap_dates = {}
            bsdat['table'].forEach(function(x){
              var cid = x['course_id'];
              try{
                wrap_dates[cid] = new Date(x['Course Wrap']);
              }
              catch(err){
                console.log("for ", cid, " could not parse broad_stats course_wrap date ", x['Course Wrap']);
              }
            });
            console.log('Wrap dates = ', wrap_dates);
            var msg = ""
            cdata.forEach(function(x){
              if (!x.end_date){
                var cid = x['course_id'];
                console.log("--> Missing end date for ", cid);
                var wd = wrap_dates[cid];
                if (wd){
                  x.end_date = wd;
                  msg += "<p>" + cid + " missing end date in IDV data!  Using Course Wrap from listings: " + wd + "</p>";
                }else{
                  msg += "<p>" + cid + " missing end date in IDV data!  Unaccounted revenue = " + x.net_rev + "</p>";
                }
              }
            });
            console.log(msg);

            // get specified fiscal year start month
            var fy_month = Number($('#rbyfy_month').val());
            console.log("fy_month=", fy_month);
            // aggregate by quarters

            // make list of months when quarters start
            var quarter_start_months = [];
            for (var k=0; k<4; k++){
              var start = (k*3+fy_month-1)%12 + 1;
              var end = (start-1+3)%12 + 1;
              quarter_start_months.push(start);
            }
            console.log("quarters_start_months = ", quarter_start_months);

            // start with first quarter in year of min_end_date, and end with last quarter
            // in year of max_end_date.  make list of all quarters, each element as a date object.

            var quarters = [];
            // beware, javascript Date indexes months starting from 0
                    var start_date = new Date(min_end_date.getFullYear(), math.min(quarter_start_months)-1, 1);
            var end_date = new Date(max_end_date.getFullYear(), math.max(quarter_start_months)-1, 1);
            var the_date = start_date;
            while (the_date < end_date){
              quarters.push(new Date(the_date));
              the_date.setMonth(the_date.getMonth() + 3);   // each quarter is 3 months
            }
                    console.log("quarters = ", quarters);

            var monthDelta = function(x,y){ return x.getMonth() - y.getMonth() + (12 * (x.getFullYear() - y.getFullYear())); }

            // iterate over all courses, put data into one quarter.

            var quarterly_revenue = {};
            var quarterly_ncourses = {};
            cdata.forEach(function(x){
              var ed = x['end_date'];
              if (!ed){
                x['end_date'] = "n/a";
                x['quarter'] = "n/a";
                return;
              }
              quarters.forEach(function(q){
                var dm = monthDelta(ed,q);
                if ((ed >= q) && (dm < 3)){
                  var qstr = q.toISOString().substring(0,7);
                  quarterly_revenue[qstr] = (quarterly_revenue[qstr] || 0) + x['net_rev'];
                  quarterly_ncourses[qstr] = (quarterly_ncourses[qstr] || 0) + 1;
                  x['quarter'] = qstr;
                }
              });
            });
            console.log("quarterly revenue: ", quarterly_revenue);
            console.log("quarterly ncourses: ", quarterly_ncourses);

            // make into table and display
            var tabdata = [];
            var total_revenue = 0;
            var total_ncourses = 0;
            quarters.forEach(function(q){
              var qstr = q.toISOString().substring(0,7);
              tabdata.push({quarter: qstr, revenue: quarterly_revenue[qstr] || 0, ncourses: quarterly_ncourses[qstr] || 0 });
              total_revenue += quarterly_revenue[qstr] || 0;
              total_ncourses += quarterly_ncourses[qstr] || 0;
            });
            tabdata.push({quarter:"TOTAL", revenue: total_revenue, ncourses: total_ncourses});
            add_text("Table of past, current, and future revenue bookings, based on fiscal quarter in which course ends");
            make_table([colent("Quarter start YYYY-MM", 'quarter'),
                        colent('Revenue ($)', 'revenue', {fixed:2}),
                        colent('# courses', 'ncourses'),
                        ],
                       tabdata,
                       {pageLength: 50}
                      );
            add_text(msg);

            add_text('<br/>');
            add_text("Detailed listing of individual courses with revenue and dates");
            // detailed table with each course, net revenue, gross, and refunds
            dtab_div = make_table([colent('course_id', 'course_id'),
                                   colent('Net Revenue ($)', 'net_rev', {fixed:2}),
                                   colent('Gross Revenue ($)', 'grev', {fixed:2}),
                                   colent('Refunds ($)', 'refunds', {fixed:2}),
                                   colent('Course end date', 'end_date', {simpledate: 10}),
                                   colent('Fiscal quarter', 'quarter'),
                                  ], cdata);
            // make_show_hide("Detailed listing of individual courses with revenue and end dates", dtab_div);

          }

          $('#rbfy_button').click(do_revenue_by_fy);
        };

        // get tags, and aggregate by tag

        var aggregate_by_tags = function(bsdat){
          var tags = {};  // array with key = tag, value = list of courses with that tag
          bsdat['table'].forEach(function(x){
            var cid = x['course_id'];
            x['tags'].forEach(function(tag){
              tags[tag] = tags[tag] || [];
              tags[tag].push(cid);
            });
          });

          // aggregate revenue by tag
          var rdat_by_tag = {};
          var rdat_list = [];
          Object.keys(tags).forEach(function(tag){
            var tdat = {grev: 0, refunds: 0, net_rev: 0, courses: tags[tag], 'tag': tag};
            tags[tag].forEach(function(course_id){
              var rdat = rdat_by_course[course_id];
              if (rdat){
                tdat.grev += rdat.grev;
                tdat.refunds += rdat.refunds;
                tdat.net_rev += rdat.net_rev;
              }
            });
            rdat_by_tag[tag] = tdat;
            rdat_list.push(tdat);
          });

          var the_tags = [];
          var tag_net_rev = [];
          var tag_refunds = [];
          rdat_list.sort(function(a,b){ return b.net_rev - a.net_rev; });
          rdat_list.forEach(function(x){
            the_tags.push(x['tag']);
            tag_refunds.push(x['refunds']);
            tag_net_rev.push(x['net_rev']);
          });

          var trseries = [
            {name: "Refunds ($)", data: tag_refunds},
            {name: 'Net revenue ($)', data: tag_net_rev},
          ];

          make_horizontal_bar_plot('Revenue for all {{parameter_values.orgname}} courses, by department / area',
                                   the_tags,
                                   trseries,
                                   {height: 120+40*tag_refunds.length,
                                    stacking: "normal",
                                    dataLabels: false,
                                    stackLabels: { enabled: true },
                                   });

          // show button for aggregating revenues by fiscal year
          add_text('<br style="clear:left;"/>'); // otherwise plot obscures stuff below
          setup_revenue_by_fy(bsdat);
        }

        $.getJSON('/dashboard/get/broad_stats', {}, aggregate_by_tags);

        bp_div = make_horizontal_bar_plot('Revenue for all {{parameter_values.orgname}} courses',
                                              courses,
                                              rseries,
                                              {height: 120+40*grev.length,
                                               stacking: "normal",
                                               stackLabels: { enabled: true },
                                              });

        make_show_hide("Revenue chart for each course", bp_div);


        // show big table of all the data
        // new_section("All revenue data:");
        // make_table(ajax_data['tablecolumns'], ajax_data['data']);
      }

      var get = function(x){ return eval(x); }  // jshint ignore:line

      return {process_data: process_data,
              self: this,
              data: data,
              get: get,
             }

    }

    analytics_report = make_report();  // instantiate
    parameters.filename = "ID_Verified_current.csv";
    console.log('parameters=', parameters);

    if (1){
      $.getJSON(
        '/file/get/report',
        parameters,
        analytics_report.process_data
      );
    }

  "meta_info": {}
  "name": |-
    revenue-report-all-courses
  "sql": ""
  "table_name": |-
    None
  "title": |-
    Revenue Report - All Courses
