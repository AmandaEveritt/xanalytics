- "author": |-
    None
  "date": |-
    2015-03-18 05:00:11.763901
  "depends_on": |-
    ["{dataset}.person_course"]
  "description": |-
    US Map of Participants by State Normalized by Population
  "group_tags":
  - !!python/unicode ""
  "html": |-
    <div id="contain-{{report_name}}" style="min-width: 310px; margin: 0 auto">
                                   <img src="/images/loading_icon.gif"/>
    </div>
  "icon": |-
    None
  "javascript": |
    parameters = {{parameters}};
    parameters.get_table_columns = true;

    $.getJSON(
      '/custom/get_report_data/{{report_name}}',
      parameters,

      function(data) {

        html = '<table id="table-{{report_name}}" class="display" width="100%"></table>';
        html += '<div id="plot-{{report_name}}"></div>';
        if (data.error){
          html = "Error!  " + data.error;
        }
        $('#contain-{{report_name}}').html(html);
        if (data.error){ return; }

        // make data table
        if (0) {
          var table = $('#table-{{report_name}}').DataTable({
            dom: 'T<"clear">lfrtip',
            "columns": data['tablecolumns'],
            "pageLength": 10,
            searching: true,
            ordering: true,
            data: data['data'],
          });
        }


        // create data series
        var series_data = [];
        var z_data = [];
        data['data'].forEach(function(x){

          z_row = {'code': x.state,
                   'name': x.state,
                   'reg': Number(x.n_registered),
                   'cert': Number(x.n_certified),
                   'ver': Number(x.n_verified),
                   'ver_cert': Number(x.n_verified_certified),
                   'viewed': Number(x.n_viewed),
                   'z': Number(x.norm_viewed)};
          z_data.push(z_row);
        });

        // make map data
        //var mapData = Highcharts.geojson(Highcharts.maps['custom/world']);
        var stateMap = Highcharts.geojson(Highcharts.maps['countries/us/us-all']);
        var stateLines = Highcharts.geojson(Highcharts.maps['countries/us/us-all'], 'mapline');


        //var countiesMap = Highcharts.geojson(Highcharts.maps['custom/us-all-all']);
        //var countiesMap = Highcharts.geojson(Highcharts.maps['custom/us-all-all']);

        // plot data
        $('#plot-{{report_name}}').highcharts('Map', {
          title: {
            text: '{{orgname}} Participants Across U.S. States for ' + parameters.course_id,
          },

          chart : {
            borderWidth : 1,
            height: 800,
            marginRight: 50 // for the legend
          },

          credits: {  enabled: false  },
          tooltip: {
            crosshairs: [{
              zIndex: 5,
              dashStyle: 'dot',
              snap: false,
              color: 'gray'
            }, {
              zIndex: 5,
              dashStyle: 'dot',
              snap: false,
              color: 'gray'
            }],
          },

          mapNavigation: {
            enabled: true
          },

          series: [{
            name: 'Basemap',
            mapData: stateMap,
            //joinBy: ['hc-a2','code'],
            //joinBy: 'code',
            //data: z_data,
            borderColor: '#606060',
            nullColor: 'rgba(200, 200, 200, 0.2)',
            showInLegend: false
          }, {
            name: 'Separators',
            type: 'mapline',
            data: stateLines,
            color: '#101010',
            enableMouseTracking: false
          }, {
            type: 'mapbubble',
            dataLabels: {
              enabled: true,
              color: "black",
              style: "HcTextStroke",
              format: '{point.name}'
            },
            mapData: stateMap,
            name: 'Cities',
            joinBy: ['hc-a2','code'],
            //joinBy: 'code',
            data: z_data,
            maxSize: '12%',
            minSize: '1%',
            tooltip: {
              valueDecimals: 3,
              pointFormat: '{point.code}:  {point.name}<br/>{point.z} normalized<br/>{point.viewed} viewed<br/>{point.reg} registered<br/>{point.cert} certified<br/>{point.ver} verified<br/>{point.ver_cert} verified certified'
            },
            color: Highcharts.getOptions().colors[2]
            //color: "black"
          }]

        });

      } );
  "meta_info":
    !!python/unicode "require_table": !!python/unicode |-
      {course_report_org}.mapping_state_pop
  "name": |-
    us_map_by_state_generic
  "sql": |
    SELECT pc_stats_by_state.pc_data.region as state,
           pc_stats_by_state.n_registered as n_registered,
           pc_stats_by_state.n_viewed as n_viewed,
           pc_stats_by_state.n_certified as n_certified,
           pc_stats_by_state.n_verified as n_verified,
           pc_stats_by_state.n_verified_certified as n_verified_certified,
           state_pop.population as population,
           float(pc_stats_by_state.n_registered) / float(state_pop.population) *100.00 as norm_reg,
           float(pc_stats_by_state.n_viewed) / float(state_pop.population) *100.00 as norm_viewed,
           float(pc_stats_by_state.n_certified) / float(state_pop.population) *100.00 as norm_certified,
           float(pc_stats_by_state.n_verified) / float(state_pop.population) *100.00 as norm_verified,
    FROM (SELECT
     pc_data.region,
     mcz.FIPS_STATE,
     INTEGER(count(*)) as n_state,
     sum(pc_data.registered) as n_registered,
     sum(pc_data.viewed) as n_viewed,
     sum(pc_data.explored) as n_explored,
     sum(pc_data.certified) as n_certified,
     sum(case when pc_data.mode = "verified" then 1 else 0 end) as n_verified,
     sum(case when pc_data.mode = "verified" and boolean(pc_data.certified) then 1 else 0 end) as n_verified_certified,
     FROM
     (SELECT * FROM (SELECT country, countryLabel, region, city, postalCode, username, registered, viewed, explored, certified, is_active, mode,
                FROM (
                 SELECT
                   username,
                   registered,
                   viewed,
                   explored,
                   certified,
                   is_active,
                   mode,
                   INTEGER(PARSE_IP(ip)) AS clientIpNum,
                   INTEGER(PARSE_IP(ip)/(256*256)) AS classB,
                 FROM
                   [{dataset}.person_course]
                 WHERE ip IS NOT NULL
                   ) AS a
                JOIN EACH [fh-bigquery:geocode.geolite_city_bq_b2b] AS b
                ON a.classB = b.classB
                WHERE a.clientIpNum BETWEEN b.startIpNum AND b.endIpNum
                AND city != ''
                ORDER BY username) as pc_data
               LEFT JOIN EACH [{course_report_org}.mapping_county_zip] as mcz
               ON pc_data.postalCode = mcz.ZIP
                     WHERE pc_data.country == "US" and pc_data.postalCode is not null) as pc_data
     WHERE pc_data.region is not null and pc_data.countryLabel = "United States" and mcz.FIPS_STATE is not null
     GROUP BY pc_data.region, mcz.FIPS_STATE) as pc_stats_by_state,
     LEFT JOIN EACH
     (SELECT CENSUS2010POP as census_population, POPESTIMATE2014 as population, STATE
     FROM [{course_report_org}.mapping_state_pop]
     WHERE STATE is not null) as state_pop
     ON pc_stats_by_state.mcz.FIPS_STATE = state_pop.STATE
  "table_name": |-
    stats_us_map_by_state
  "title": |-
    US Map of Participants by State
